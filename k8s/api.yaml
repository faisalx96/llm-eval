apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-eval-api
  namespace: llm-eval
  labels:
    app.kubernetes.io/name: llm-eval
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "0.3.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: llm-eval-api
  template:
    metadata:
      labels:
        app: llm-eval-api
        app.kubernetes.io/name: llm-eval
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: llm-eval-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: DATABASE_URL
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until pg_isready -d "$DATABASE_URL"; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 2
              done
              echo "PostgreSQL is ready!"
        - name: wait-for-redis
          image: redis:7-alpine
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: REDIS_PASSWORD
          command:
            - sh
            - -c
            - |
              echo "Waiting for Redis to be ready..."
              until redis-cli -h redis -p 6379 -a "$REDIS_PASSWORD" ping; do
                echo "Redis is unavailable - sleeping"
                sleep 2
              done
              echo "Redis is ready!"
        - name: db-migrate
          image: llm-eval:0.3.0
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: DATABASE_URL
          command:
            - python
            - -m
            - llm_eval.storage.migration
            - --upgrade
          volumeMounts:
            - name: app-logs
              mountPath: /app/logs
      containers:
        - name: api
          image: llm-eval:0.3.0
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
          env:
            # Import environment from ConfigMaps
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: llm-eval-api-config
                  key: NODE_ENV
            - name: API_HOST
              valueFrom:
                configMapKeyRef:
                  name: llm-eval-api-config
                  key: API_HOST
            - name: API_PORT
              valueFrom:
                configMapKeyRef:
                  name: llm-eval-api-config
                  key: API_PORT
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: llm-eval-api-config
                  key: LOG_LEVEL
            - name: DATABASE_POOL_SIZE
              valueFrom:
                configMapKeyRef:
                  name: llm-eval-api-config
                  key: DATABASE_POOL_SIZE
            - name: REDIS_MAX_CONNECTIONS
              valueFrom:
                configMapKeyRef:
                  name: llm-eval-api-config
                  key: REDIS_MAX_CONNECTIONS
            - name: RATE_LIMIT_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: llm-eval-api-config
                  key: RATE_LIMIT_ENABLED
            - name: LANGFUSE_HOST
              valueFrom:
                configMapKeyRef:
                  name: llm-eval-api-config
                  key: LANGFUSE_HOST
            # Import secrets
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: REDIS_URL
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: SECRET_KEY
            - name: LANGFUSE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: LANGFUSE_SECRET_KEY
            - name: LANGFUSE_PUBLIC_KEY
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: LANGFUSE_PUBLIC_KEY
            # Optional external services
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: llm-eval-secrets
                  key: SENTRY_DSN
                  optional: true
            # Production CORS settings
            - name: CORS_ORIGINS
              value: "https://llm-eval.example.com,https://api.llm-eval.example.com"
            - name: TRUSTED_HOSTS
              value: "llm-eval.example.com,api.llm-eval.example.com"
          volumeMounts:
            - name: app-logs
              mountPath: /app/logs
            - name: app-data
              mountPath: /app/data
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
      volumes:
        - name: app-logs
          emptyDir: {}
        - name: app-data
          persistentVolumeClaim:
            claimName: api-data-pvc
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - llm-eval-api
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 30
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 30

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-data-pvc
  namespace: llm-eval
  labels:
    app.kubernetes.io/name: llm-eval
    app.kubernetes.io/component: api
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: llm-eval-api
  namespace: llm-eval
  labels:
    app.kubernetes.io/name: llm-eval
    app.kubernetes.io/component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app: llm-eval-api
  sessionAffinity: None

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: llm-eval-api
  namespace: llm-eval
  labels:
    app.kubernetes.io/name: llm-eval
    app.kubernetes.io/component: api

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: llm-eval
  name: llm-eval-api-role
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: llm-eval-api-rolebinding
  namespace: llm-eval
subjects:
  - kind: ServiceAccount
    name: llm-eval-api
    namespace: llm-eval
roleRef:
  kind: Role
  name: llm-eval-api-role
  apiGroup: rbac.authorization.k8s.io