name: Deployment Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-deployment:
    name: Determine Deployment Strategy
    runs-on: ubuntu-latest
    outputs:
      deploy-staging: ${{ steps.strategy.outputs.deploy-staging }}
      deploy-production: ${{ steps.strategy.outputs.deploy-production }}
      version: ${{ steps.strategy.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine deployment strategy
      id: strategy
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "deploy-staging=false" >> $GITHUB_OUTPUT
            echo "deploy-production=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-staging=true" >> $GITHUB_OUTPUT
            echo "deploy-production=false" >> $GITHUB_OUTPUT
          fi
        elif [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "deploy-staging=true" >> $GITHUB_OUTPUT
          echo "deploy-production=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "deploy-staging=true" >> $GITHUB_OUTPUT
          echo "deploy-production=false" >> $GITHUB_OUTPUT
        else
          echo "deploy-staging=false" >> $GITHUB_OUTPUT
          echo "deploy-production=false" >> $GITHUB_OUTPUT
        fi
        
        # Extract version from tag or use commit SHA
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.sha }}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

  build-backend:
    name: Build Backend Package
    runs-on: ubuntu-latest
    needs: determine-deployment
    if: needs.determine-deployment.outputs.deploy-staging == 'true' || needs.determine-deployment.outputs.deploy-production == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Update version for development builds
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      run: |
        # For non-tag builds, append commit SHA to version
        sed -i 's/version="0\.3\.0"/version="0.3.0.dev${{ github.sha }}"/' setup.py
    
    - name: Build package
      run: |
        python -m build
        ls -la dist/
    
    - name: Check package
      run: |
        twine check dist/*
        pip install dist/*.whl
        python -c "import llm_eval; print(f'Successfully imported llm_eval v{llm_eval.__version__}')"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: dist/
        retention-days: 30

  build-frontend:
    name: Build Frontend Application
    runs-on: ubuntu-latest
    needs: determine-deployment
    if: needs.determine-deployment.outputs.deploy-staging == 'true' || needs.determine-deployment.outputs.deploy-production == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run type checking
      working-directory: frontend
      run: npm run type-check
    
    - name: Run linting
      working-directory: frontend
      run: npm run lint
    
    - name: Build application
      working-directory: frontend
      run: |
        npm run build
        ls -la .next/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: |
          frontend/.next/
          frontend/public/
        retention-days: 30

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [determine-deployment, build-backend, build-frontend]
    if: needs.determine-deployment.outputs.deploy-staging == 'true' || needs.determine-deployment.outputs.deploy-production == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-packages
        path: dist/
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend-build/
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        # Multi-stage build for LLM-Eval
        FROM node:20-alpine AS frontend-builder
        WORKDIR /frontend
        COPY frontend/package*.json ./
        RUN npm ci
        COPY frontend/ ./
        COPY frontend-build/.next ./.next
        
        FROM python:3.11-slim AS backend-builder
        WORKDIR /app
        COPY dist/ ./dist/
        RUN pip install dist/*.whl
        
        FROM python:3.11-slim AS runtime
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy Python package
        COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
        COPY --from=backend-builder /usr/local/bin /usr/local/bin
        
        # Copy frontend build
        COPY --from=frontend-builder /frontend/.next /app/frontend/.next
        COPY --from=frontend-builder /frontend/public /app/frontend/public
        COPY frontend/package.json /app/frontend/
        
        # Install Node.js for frontend serving
        RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
            && apt-get install -y nodejs
        
        # Create non-root user
        RUN useradd --create-home --shell /bin/bash llmeval
        USER llmeval
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8000/health || exit 1
        
        EXPOSE 8000 3000
        
        # Start both backend and frontend
        CMD ["sh", "-c", "llm-eval-api & cd frontend && npm start"]
        EOF
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-deployment, docker-build]
    if: needs.determine-deployment.outputs.deploy-staging == 'true'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-deployment.outputs.version }}"
        
        # Here you would typically:
        # 1. Update Kubernetes manifests
        # 2. Deploy to staging cluster
        # 3. Run smoke tests
        # 4. Update deployment status
        
        echo "✅ Staging deployment completed"
    
    - name: Run staging smoke tests
      run: |
        echo "🧪 Running smoke tests against staging"
        # Add actual smoke tests here
        # curl -f https://staging.your-domain.com/health
        echo "✅ Smoke tests passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-deployment, deploy-staging, docker-build]
    if: needs.determine-deployment.outputs.deploy-production == 'true' && (needs.deploy-staging.result == 'success' || needs.deploy-staging.result == 'skipped')
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-deployment.outputs.version }}"
        
        # Here you would typically:
        # 1. Update Kubernetes manifests
        # 2. Deploy to production cluster with blue/green or canary strategy
        # 3. Run health checks
        # 4. Update deployment status
        
        echo "✅ Production deployment completed"
    
    - name: Run production health checks
      run: |
        echo "🏥 Running production health checks"
        # Add actual health checks here
        # curl -f https://your-domain.com/health
        echo "✅ Health checks passed"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [determine-deployment, build-backend]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    environment: pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-packages
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verify-metadata: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-deployment, build-backend, build-frontend]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-packages
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [[ -n "$LAST_TAG" ]]; then
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges -10)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## Changes
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ```bash
          pip install llm-eval==${{ github.ref_name }}
          ```
          
          ## Docker
          
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          ```
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, publish-pypi]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
    - name: Notify deployment status
      uses: actions/github-script@v6
      with:
        script: |
          const { needs } = context.payload.workflow_run || {};
          
          let summary = '## 🚀 Deployment Summary\n\n';
          summary += '| Environment | Status |\n';
          summary += '|-------------|--------|\n';
          
          if ('${{ needs.deploy-staging.result }}' !== 'skipped') {
            summary += `| Staging | ${{ needs.deploy-staging.result == 'success' && '✅ Success' || '❌ Failed' }} |\n`;
          }
          
          if ('${{ needs.deploy-production.result }}' !== 'skipped') {
            summary += `| Production | ${{ needs.deploy-production.result == 'success' && '✅ Success' || '❌ Failed' }} |\n`;
          }
          
          if ('${{ needs.publish-pypi.result }}' !== 'skipped') {
            summary += `| PyPI | ${{ needs.publish-pypi.result == 'success' && '✅ Published' || '❌ Failed' }} |\n`;
          }
          
          console.log(summary);