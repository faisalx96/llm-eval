name: "CodeQL Security Analysis"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '43 3 * * 1'  # Weekly on Mondays at 3:43 AM
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-extended,security-and-quality

    - name: Setup Python for analysis
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Setup Node.js for analysis
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      working-directory: frontend
      run: npm ci

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        deny-licenses: GPL-2.0, GPL-3.0

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-audit
      run: pip install pip-audit

    - name: Run pip-audit on requirements
      run: |
        pip install -e .
        pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true

    - name: Upload pip-audit report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: pip-audit-report
        path: pip-audit-report.json
        retention-days: 30

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: |
        cat > Dockerfile.security << 'EOF'
        FROM python:3.11-slim
        WORKDIR /app
        COPY . .
        RUN pip install -e .
        EOF
        docker build -f Dockerfile.security -t llm-eval:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'llm-eval:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [analyze, supply-chain-security, secrets-scan]
    if: always()

    steps:
    - name: Generate security summary
      uses: actions/github-script@v6
      with:
        script: |
          const needs = ${{ toJson(needs) }};

          let summary = '## 🔒 Security Analysis Summary\n\n';
          summary += '| Check | Status | Details |\n';
          summary += '|-------|--------|----------|\n';

          // CodeQL Analysis
          const codeqlStatus = needs.analyze?.result === 'success' ? '✅ Passed' : '❌ Failed';
          summary += `| CodeQL Analysis | ${codeqlStatus} | Static code analysis for security vulnerabilities |\n`;

          // Supply Chain Security
          const supplyChainStatus = needs['supply-chain-security']?.result === 'success' ? '✅ Passed' : '⚠️  Issues Found';
          summary += `| Supply Chain | ${supplyChainStatus} | Dependency vulnerability scanning |\n`;

          // Secrets Scanning
          const secretsStatus = needs['secrets-scan']?.result === 'success' ? '✅ Clean' : '❌ Secrets Found';
          summary += `| Secrets Scan | ${secretsStatus} | Scan for exposed secrets and credentials |\n`;

          // Add recommendations
          summary += '\n## 🛡️ Security Recommendations\n\n';
          summary += '- Keep dependencies up to date\n';
          summary += '- Use environment variables for sensitive configuration\n';
          summary += '- Regularly review and rotate API keys\n';
          summary += '- Monitor security advisories for used packages\n';
          summary += '- Enable branch protection rules\n';

          console.log(summary);

          // Post as comment on PR if applicable
          if (context.payload.pull_request) {
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
